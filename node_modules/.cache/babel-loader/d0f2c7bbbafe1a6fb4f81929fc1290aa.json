{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport React, { useContext } from 'react';\nimport { IconSettingsContext } from './IconSettings';\nvar svgStyle = {\n  display: 'block'\n};\n\nfunction iconClass(fragments, _ref) {\n  var classPrefix = _ref.classPrefix,\n      globalClasses = _ref.globalClasses;\n  var res = '';\n\n  for (var i = 0; i < fragments.length; i++) {\n    if (classPrefix) {\n      res += ' ' + (classPrefix + fragments[i]);\n    }\n\n    if (!classPrefix || globalClasses) {\n      res += ' ' + fragments[i];\n    }\n  }\n\n  return res;\n}\n\nexport var SvgIcon = function SvgIcon(_ref2) {\n  var width = _ref2.width,\n      height = _ref2.height,\n      viewBox = _ref2.viewBox,\n      id = _ref2.id,\n      className = _ref2.className,\n      style = _ref2.style,\n      fill = _ref2.fill,\n      getRootRef = _ref2.getRootRef,\n      restProps = _objectWithoutProperties(_ref2, [\"width\", \"height\", \"viewBox\", \"id\", \"className\", \"style\", \"fill\", \"getRootRef\"]);\n\n  var size = Math.max(width, height);\n  var iconSettings = useContext(IconSettingsContext);\n  var ownClass = iconClass(['Icon', \"Icon--\".concat(size), \"Icon--w-\".concat(width), \"Icon--h-\".concat(height), \"Icon--\".concat(id)], iconSettings);\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", _extends({}, restProps, {\n      ref: getRootRef,\n      className: \"\".concat(ownClass, \" \").concat(className),\n      style: _objectSpread(_objectSpread({}, style), {}, {\n        width: width,\n        height: height\n      })\n    }),\n    /*#__PURE__*/\n    React.createElement(\"svg\", {\n      viewBox: viewBox,\n      width: width,\n      height: height,\n      style: svgStyle\n    },\n    /*#__PURE__*/\n    React.createElement(\"use\", {\n      xlinkHref: \"#\".concat(id),\n      style: {\n        fill: 'currentColor',\n        color: fill\n      }\n    })))\n  );\n};\nSvgIcon.defaultProps = {\n  className: '',\n  style: {}\n};","map":null,"metadata":{},"sourceType":"module"}