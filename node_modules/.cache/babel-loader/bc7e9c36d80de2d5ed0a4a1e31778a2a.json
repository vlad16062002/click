{"ast":null,"code":"(function () {\n  function isFunction(object) {\n    return typeof object === 'function';\n  }\n\n  var subscribers = [];\n  var webFrameId = null;\n  var connectVersion = '1.5.4';\n  var isClient = typeof window !== 'undefined';\n  var isIOSNativeClient = isClient && window.webkit && window.webkit.messageHandlers !== undefined && window.webkit.messageHandlers.VKWebAppGetUserInfo !== undefined;\n  var androidBridge = isClient && window.AndroidBridge;\n  var iosBridge = isIOSNativeClient && window.webkit.messageHandlers;\n  var isWeb = isClient && !androidBridge && !iosBridge;\n  var eventType = isWeb ? 'message' : 'VKWebAppEvent';\n\n  if (isClient) {\n    // polyfill\n    if (!window.CustomEvent) {\n      (function () {\n        function CustomEvent(event, params) {\n          params = params || {\n            bubbles: false,\n            cancelable: false,\n            detail: undefined\n          };\n          var evt = document.createEvent('CustomEvent');\n          evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n          return evt;\n        }\n\n        CustomEvent.prototype = window.Event.prototype;\n        window.CustomEvent = CustomEvent;\n      })();\n    }\n\n    window.addEventListener(eventType, function () {\n      var args = Array.prototype.slice.call(arguments);\n\n      var _subscribers = subscribers.slice();\n\n      if (isWeb) {\n        if (Object.prototype.hasOwnProperty.call(args[0].data, 'webFrameId')) {\n          delete args[0].data.webFrameId;\n        }\n\n        if (Object.prototype.hasOwnProperty.call(args[0].data, 'connectVersion')) {\n          delete args[0].data.connectVersion;\n        }\n\n        if (args[0].data.type && args[0].data.type === 'VKWebAppSettings') {\n          webFrameId = args[0].data.frameId;\n        } else {\n          _subscribers.forEach(function (fn) {\n            fn({\n              detail: args[0].data\n            });\n          });\n        }\n      } else {\n        _subscribers.forEach(function (fn) {\n          fn.apply(null, args);\n        });\n      }\n    });\n  }\n\n  var vkuiConnect = {\n    /**\n     * Sends a message to native client\n     *\n     * @example\n     * message.send('VKWebAppInit');\n     *\n     * @param {String} handler Message type\n     * @param {Object} params Message data\n     * @returns {void}\n     */\n    send: function send(handler, params) {\n      if (!params) {\n        params = {};\n      }\n\n      if (androidBridge && isFunction(androidBridge[handler])) {\n        androidBridge[handler](JSON.stringify(params));\n      }\n\n      if (iosBridge && iosBridge[handler] && isFunction(iosBridge[handler].postMessage)) {\n        iosBridge[handler].postMessage(params);\n      }\n\n      if (isWeb) {\n        parent.postMessage({\n          handler: handler,\n          params: params,\n          type: 'vk-connect',\n          webFrameId: webFrameId,\n          connectVersion: connectVersion\n        }, '*');\n      }\n    },\n\n    /**\n     * Subscribe on VKWebAppEvent\n     *\n     * @param {Function} fn Event handler\n     * @returns {void}\n     */\n    subscribe: function subscribe(fn) {\n      subscribers.push(fn);\n    },\n\n    /**\n     * Unsubscribe on VKWebAppEvent\n     *\n     * @param {Function} fn Event handler\n     * @returns {void}\n     */\n    unsubscribe: function unsubscribe(fn) {\n      var index = subscribers.indexOf(fn);\n\n      if (index > -1) {\n        subscribers.splice(index, 1);\n      }\n    },\n\n    /**\n     * Checks if it is client webview\n     *\n     * @returns {boolean}\n     */\n    isWebView: function isWebView() {\n      return !!(androidBridge || iosBridge);\n    },\n\n    /**\n     * Checks if native client supports nandler\n     *\n     * @param {String} handler Handler name\n     * @returns {boolean}\n     */\n    supports: function supports(handler) {\n      var desktopEvents = ['VKWebAppInit', 'VKWebAppGetCommunityAuthToken', 'VKWebAppAddToCommunity', 'VKWebAppGetUserInfo', 'VKWebAppSetLocation', 'VKWebAppGetClientVersion', 'VKWebAppGetPhoneNumber', 'VKWebAppGetEmail', 'VKWebAppGetGeodata', 'VKWebAppSetTitle', 'VKWebAppGetAuthToken', 'VKWebAppCallAPIMethod', 'VKWebAppJoinGroup', 'VKWebAppAllowMessagesFromGroup', 'VKWebAppDenyNotifications', 'VKWebAppAllowNotifications', 'VKWebAppOpenPayForm', 'VKWebAppOpenApp', 'VKWebAppShare', 'VKWebAppShowWallPostBox', 'VKWebAppScroll', 'VKWebAppResizeWindow', 'VKWebAppShowOrderBox', 'VKWebAppShowLeaderBoardBox', 'VKWebAppShowInviteBox', 'VKWebAppShowRequestBox', 'VKWebAppAddToFavorites'];\n      if (androidBridge && isFunction(androidBridge[handler])) return true;\n      if (iosBridge && iosBridge[handler] && isFunction(iosBridge[handler].postMessage)) return true;\n      if (!iosBridge && !androidBridge && ~desktopEvents.indexOf(handler)) return true;\n      return false;\n    }\n  };\n\n  if (typeof exports === 'object' && typeof module !== 'undefined') {\n    module.exports = vkuiConnect;\n  } else {\n    var root;\n\n    if (typeof window !== 'undefined') {\n      root = window;\n    } else if (typeof global !== 'undefined') {\n      root = global;\n    } else if (typeof self !== 'undefined') {\n      root = self;\n    } else {\n      root = this;\n    }\n\n    root.vkuiConnect = vkuiConnect;\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}