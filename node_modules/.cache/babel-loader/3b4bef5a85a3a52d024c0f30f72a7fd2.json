{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport React, { useEffect, useRef } from 'react';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { hasReactNode, isFunction, setRef } from '../../lib/utils';\nimport { classNames } from '../../lib/classNames';\nimport { getClassName } from '../../helpers/getClassName';\nexport var WriteBar = function WriteBar(props) {\n  var platform = usePlatform();\n\n  var className = props.className,\n      style = props.style,\n      before = props.before,\n      inlineAfter = props.inlineAfter,\n      after = props.after,\n      value = props.value,\n      onChange = props.onChange,\n      getRootRef = props.getRootRef,\n      getRef = props.getRef,\n      onHeightChange = props.onHeightChange,\n      restProps = _objectWithoutProperties(props, [\"className\", \"style\", \"before\", \"inlineAfter\", \"after\", \"value\", \"onChange\", \"getRootRef\", \"getRef\", \"onHeightChange\"]);\n\n  var isControlledOutside = value != null;\n  var textareaRef = useRef(null);\n  var textareaMinHeightRef = useRef(null);\n\n  var resize = function resize() {\n    var textareaEl = textareaRef.current;\n\n    if (!textareaEl) {\n      return;\n    }\n\n    var offsetHeight = textareaEl.offsetHeight,\n        scrollHeight = textareaEl.scrollHeight;\n    var style = window.getComputedStyle(textareaEl);\n    var paddingTop = parseInt(style.paddingTop);\n    var paddingBottom = parseInt(style.paddingBottom);\n\n    if (textareaMinHeightRef.current === null) {\n      textareaMinHeightRef.current = offsetHeight;\n    }\n\n    var diff = paddingTop + paddingBottom + 10;\n\n    if (scrollHeight + diff <= offsetHeight) {\n      diff = 0;\n    }\n\n    textareaEl.style.height = '0px';\n    var height = textareaEl.scrollHeight - diff / 4;\n    textareaEl.style.height = String(Math.max(height, textareaMinHeightRef.current)) + 'px';\n\n    if (isFunction(onHeightChange)) {\n      onHeightChange();\n    }\n  };\n\n  var onTextareaChange = function onTextareaChange(event) {\n    if (isFunction(onChange)) {\n      onChange(event);\n    }\n\n    if (!isControlledOutside) {\n      resize();\n    }\n  };\n\n  var getTextareaElRef = function getTextareaElRef(element) {\n    textareaRef.current = element;\n    setRef(element, getRef);\n  };\n\n  useEffect(function () {\n    resize();\n  }, [value]);\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      ref: getRootRef,\n      className: classNames(getClassName('WriteBar', platform), className),\n      style: style\n    },\n    /*#__PURE__*/\n    React.createElement(\"form\", {\n      className: \"WriteBar__form\",\n      onSubmit: function onSubmit(e) {\n        return e.preventDefault();\n      }\n    }, hasReactNode(before) &&\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"WriteBar__before\"\n    }, before),\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"WriteBar__formIn\"\n    },\n    /*#__PURE__*/\n    React.createElement(\"textarea\", _extends({}, restProps, {\n      className: \"WriteBar__textarea\",\n      onChange: onTextareaChange,\n      ref: getTextareaElRef,\n      value: value\n    })), hasReactNode(inlineAfter) &&\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"WriteBar__inlineAfter\"\n    }, inlineAfter)), hasReactNode(after) &&\n    /*#__PURE__*/\n    React.createElement(\"div\", {\n      className: \"WriteBar__after\"\n    }, after)))\n  );\n};","map":null,"metadata":{},"sourceType":"module"}